#ifndef _UI_GRID_CEU
#define _UI_GRID_CEU

#include "c.ceu"
#include "sdl.ceu"
#include "ui.ceu"

input void SDL_REDRAW;
input _SDL_MouseButtonEvent* SDL_MOUSEBUTTONUP;

// TODO:
// * go_pause
// * remaining space from division

class UIGrid with
    interface UI;

    var _SDL_Renderer* ren       = null;
    var   int          align_x   = _UI_ALIGN_CENTER;
    var   int          align_y   = _UI_ALIGN_MIDDLE;
    var   int          bg_redim? = 0;
    var   _SDL_Color*  bg_clr    = null;


    event (int,UI*)     ok_uiclicked;

    // TODO: clr_bg vs bg_clr
    var   _SDL_Color*   clr_bg      = null; // whole UI background
    var   _SDL_Color*   clr_fr      = null; // whole UI frame
    var   _SDL_Color*   clr_cell_bg = null; // each cell background
    var   _SDL_Color*   clr_cell_fr = null; // each cell frame
    var   _SDL_Color*   clr_ui_bg   = null; // each UI background (if existent)
    var   _SDL_Color*   clr_ui_fr   = null; // each UI frame (if existent)

    //var   int           one_x=0, one_y=0;
    var   int            spc_x=0, spc_y=0;
    var   int            pad_x=0, pad_y=0;

    var   int            lay_lins, lay_cols;
    var   int*           lay = null;

    var   UI**           uis   = null;
    var   int            uis_n = 0;

    var _SDL_Rect*       cell_rects = null;
    var _SDL_Rect*       ui_rects   = null;

    function (int idx, hold UI* ui)=>void go_ui;
do
    /* METHODS */

    function (_SDL_Rect* r)=>void go do
        if r != null then
            this.rect.x = _UI_align(r:x, r:w, this.align_x);
            this.rect.y = _UI_align(r:y, r:h, this.align_y);
            this.rect.w = (u16)r:w;
            this.rect.h = (u16)r:h;
        end

        var int x0 = this.rect.x;
        var int y0 = this.rect.y;

        var int one_x = (this.rect.w-this.spc_x)/this.lay_cols
                            - this.spc_x - 2*this.pad_x;
        var int one_y = (this.rect.h-this.spc_y)/this.lay_lins
                            - this.spc_y - 2*this.pad_y;

        var int cur = -1;
        var int x, y;

        var int l;
        loop l, this.lay_lins do
            x = x0 + this.spc_x;     // starts from spc_x
            if (l == 0) then
                y = y0 + this.spc_y; // starts from spc_y
            else
                y = y + this.pad_y + one_y + this.pad_y + this.spc_y;
            end

            var int c;
            loop c, this.lay_cols do
                if (c != 0) then
                    x = x + this.pad_x + one_x
                          + this.pad_x + this.spc_x;
                end

                var int i1   = l*this.lay_cols + c;
                var int lay1 = this.lay[i1];

                if (lay1 > cur) then      // always increasing items
                    cur = lay1;
                    _assert(cur < this.uis_n);

                    var _SDL_Rect* cell_rect = &this.cell_rects[cur];
                        cell_rect:x = x;
                        cell_rect:y = y;
                        cell_rect:w = one_x + 2*this.pad_x;
                        cell_rect:h = one_y + 2*this.pad_y;

                    var _SDL_Rect* ui_rect = &this.ui_rects[cur];
                        ui_rect:x = x+this.pad_x;
                        ui_rect:y = y+this.pad_y;
                        ui_rect:w = one_x;
                        ui_rect:h = one_y;

                    // colspan
                    var int j;
                    loop j, this.lay_cols-c-1 do
                        var int lay2 = this.lay[i1 + j+1];
                        if (lay1 == lay2) then
                            cell_rect:w = cell_rect:w + this.spc_x
                                         + one_x  + 2*this.pad_x;
                            ui_rect:w   = ui_rect:w   + this.spc_x
                                         + one_x  + 2*this.pad_x;
                        else
                            break;
                        end
                    end

                    // linspan
                    loop j, this.lay_lins-l-1 do
                        var int lay2 = this.lay[i1 + (j+1)*this.lay_cols];
                        if (lay1 == lay2) then
                            cell_rect:h = cell_rect:h + this.spc_y +
                                           one_y + 2*this.pad_y;
                            ui_rect:h   = ui_rect:h   + this.spc_y +
                                           one_y + 2*this.pad_y;
                        else
                            break;
                        end
                    end

                    var UI* ui = this.uis[cur];
                    if (ui != null) then
                        ui:go_bg(ui_rect);
                    end
                end
            end
        end
    end

    function (int idx, hold UI* ui)=>void go_ui do
        this.uis[idx] = ui;
        this.go(null);
    end

    function (_SDL_Rect* bg)=>void go_bg do
        this.bg_rect := *bg;    // struct
        if (this.bg_redim_) then
            this.rect := *bg;   // struct
        end
        this.go(null);
    end

    /* BODY */

    _assert(this.ren != null);

    if this.uis == null then
        finalize
            this.uis = _malloc(uis_n * sizeof(UI*));
        with
            _free(this.uis);
        end
        loop i, uis_n do
            this.uis[i] = null;
        end
    end

    finalize
        this.cell_rects = _malloc(uis_n * sizeof(_SDL_Rect));
    with
        _free(this.cell_rects);
    end

    finalize
        this.ui_rects = _malloc(uis_n * sizeof(_SDL_Rect));
    with
        _free(this.ui_rects);
    end

    par do
        // OK_UICLICKED
        // OK_CLICKED
        loop do
            var _SDL_MouseButtonEvent* but = await SDL_MOUSEBUTTONUP;
            loop i, uis_n do
                if _SDL_Rect_vs_Mouse(&ui_rects[i], but) then
                    emit ok_uiclicked => (i, uis[i]); // 0 are blank cells
                end
            end
            if _SDL_Rect_vs_Mouse(&this.rect, but) then
                emit ok_clicked;
            end
        end
    with
        every SDL_REDRAW do
            // TODO: clr_bg vs bg_clr
            if bg_clr != null then
                _SDL_SetRenderDrawColor(ren,
                    bg_clr:r,bg_clr:g,bg_clr:b,bg_clr:a);
                _SDL_RenderFillRect(ren, &this.bg_rect);
            end
            if clr_bg != null then
                _SDL_SetRenderDrawColor(ren,
                        clr_bg:r,clr_bg:g,clr_bg:b,clr_bg:a);
                _SDL_RenderFillRect(ren, &rect);
            end
/*
clr_cell_fr? = 1;
clr_cell_fr.r = 0xFF;
clr_cell_fr.g = 0x00;
clr_cell_fr.b = 0x00;
clr_ui_fr? = 1;
clr_ui_fr.r = 0xFF;
clr_ui_fr.g = 0xFF;
clr_ui_fr.b = 0x00;
*/
            loop i, uis_n do
                if clr_cell_bg != null then
                    _SDL_SetRenderDrawColor(ren,
                        clr_cell_bg:r,clr_cell_bg:g,clr_cell_bg:b,clr_cell_bg:a);
                    _SDL_RenderFillRect(ren, &cell_rects[i]);
                end
                if clr_ui_bg != null then
                    _SDL_SetRenderDrawColor(ren,
                        clr_ui_bg:r,clr_ui_bg:g,clr_ui_bg:b,clr_ui_bg:a);
                    _SDL_RenderFillRect(ren, &ui_rects[i]);
                end
                if clr_cell_fr != null then
                    _SDL_SetRenderDrawColor(ren,
                        clr_cell_fr:r,clr_cell_fr:g,clr_cell_fr:b,clr_cell_fr:a);
                    _SDL_RenderDrawRect(ren, &cell_rects[i]);
                end
                if clr_ui_fr != null then
                    _SDL_SetRenderDrawColor(ren,
                        clr_ui_fr:r,clr_ui_fr:g,clr_ui_fr:b,clr_ui_fr:a);
                    _SDL_RenderDrawRect(ren, &ui_rects[i]);
                end
            end

            if clr_fr != null then
                _SDL_SetRenderDrawColor(ren,
                        clr_fr:r,clr_fr:g,clr_fr:b,clr_fr:a);
                _SDL_RenderDrawRect(ren, &rect);
            end
        end
    end
end

#ifdef __UI_GRID_CEU

#include "colors.ceu"
input void SDL_QUIT;

var _SDL_Window* win;
    finalize
        win = _SDL_CreateWindow("UI - Grid",
                            500, 1300, 800, 480, _SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(win);
    end
var int win_w;
var int win_h;
    _SDL_GetWindowSize(win, &win_w, &win_h);

var _SDL_Renderer* ren;
    finalize
        ren = _SDL_CreateRenderer(win, -1, 0);
    with
        _SDL_DestroyRenderer(ren);
    end

native _lay1, _lay2;
native do
    int lay1[16] = {
         0, -1, -1, -1,
        -1,  1,  1, -1,
        -1,  1,  1, -1,
        -1, -1, -1,  2
    };
    int lay2[3] = {
        0, 1, 2
    };
end

par/or do
    await SDL_QUIT;
with
    var UIGrid g1 with
        this.ren          = ren;
        this.clr_bg       = &_colors.gray;
        this.clr_fr       = &_colors.red;
        this.clr_cell_bg  = &_colors.white;
        this.clr_cell_fr  = &_colors.black;
        this.spc_x        = 10;
        this.spc_y        = 10;
        this.lay_lins     = 4;
        this.lay_cols     = 4;
        this.lay          = _lay1;
        this.uis_n        = 3;
    end;

    var UIGrid g2 with
        this.ren          = ren;
        this.bg_redim?    = 1;
        this.clr_cell_fr  = &_colors.black;
        this.clr_ui_bg    = &_colors.yellow;
        this.clr_ui_fr    = &_colors.red;
        this.pad_x        = 5;
        this.pad_y        = 5;
        this.lay_lins     = 1;
        this.lay_cols     = 3;
        this.lay          = _lay2;
        this.uis_n        = 3;
    end;

    var _SDL_Rect r;
        r.w = win_w / 2;
        r.h = win_h / 2;
        r.x = win_w / 2;
        r.y = win_h / 2;

    g1.uis[1] = &g2;
    g1.go(&r);

    par do
        loop do
            var int opt;
            var UI* ui;
            (opt,ui) = await g1.ok_uiclicked;
            _fprintf(_stderr, "G1: %d\n", opt);
        end
    with
        loop do
            var int opt;
            var UI* ui;
            (opt,ui) = await g2.ok_uiclicked;
            _fprintf(_stderr, "G2: %d\n", opt);
        end
    with
        await 3s;
        native _rand();
        every 100ms do
            r.w = r.w + _rand() % 3 - 1;
            if r.w < 100 then r.w = 100; end

            r.h = r.h + _rand() % 3 - 1;
            if r.h < 100 then r.h = 100; end

            g1.spc_x = g1.spc_x + _rand() % 3 - 1;
            if g1.spc_x < 0 then g1.spc_x = 0; end

            g1.spc_y = g1.spc_y + _rand() % 3 - 1;
            if g1.spc_y < 0 then g1.spc_y = 0; end

            g2.pad_x = g2.pad_x + _rand() % 3 - 1;
            if g2.pad_x < 0 then g2.pad_x = 0; end

            g2.pad_y = g2.pad_y + _rand() % 3 - 1;
            if g2.pad_y < 0 then g2.pad_y = 0; end

            g1.go(&r);
        end
    end
with
    every SDL_REDRAW do
        _SDL_RenderPresent(ren);
    end
end

escape 0;

#endif
#endif
