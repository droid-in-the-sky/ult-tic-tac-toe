#ifndef _ULT_GAME_CEU
#define _ULT_GAME_CEU

#include "sdl.ceu"
#include "sdl-colors.ceu"
#include "ui.ceu"
#include "ui-texture.ceu"
#include "ui-grid.ceu"

input void SDL_REDRAW;
input void SDL_QUIT;

#ifdef __ULT_GAME_CEU

interface Global with
    event (int,int,int) ok_game;   // id,won,idx
    var int player;
end
event (int,int,int) ok_game;
var int player = 1;

#endif

native @pure _Game_check();
native do
    // check win: (-1=tie, 0=going, 1=plr1, 2=plr2
    int Game_check (s8* state, int idx, int plr) {
        int x = idx / 3;
        int y = idx % 3;
        int i;

        for (i=0; i<3; i++) {    // check lin
            int p = x*3 + i;
            if (state[p] != plr)
                break;
            else if (i == 2)
                return plr;
        }

        for (i=0; i<3; i++) {    // check col
            int p = i*3 + y;
            if (state[p] != plr)
                break;
            else if (i == 2)
                return plr;
        }

        if (x == y) {            // check diag
            for (i=0; i<3; i++) {
                int p = i*3 + i;
                if (state[p] != plr)
                    break;
                else if (i == 2)
                    return plr;
            }
        }

        for (i=0; i<3; i++) {    // check anti-diag
            int p = i*3 + 2-i;
            if (state[p] != plr)
                break;
            else if (i == 2)
                return plr;
        }

        for (i=0; i<9; i++) {    // check tie
            if (state[i] == 0)
                break;
            else if (i == 8)
                return -1;
        }

        return 0;
    }
end

class Game with
    var int             id   = -1;
    var int             won = 0;       // not really a bool
    var _SDL_Renderer&  ren;
    var UIGrid&&?       grid;

    event int pse;
do
    _assert(this.id   >= 0);
    _assert(this.won == 0);

    var s8[9] state = [0,0,0,0,0,0,0,0,0];

    var int[9] lay = [
        0, 1, 2,
        3, 4, 5,
        6, 7, 8
    ];

    var UIGrid g with
        this.ren         = &ren;
        this.clr_cell_fr = SDL_COLOR_BLACK;
        this.clr_ui_bg   = SDL_COLOR_WHITE;
        this.pad_x       = 2;
        this.pad_y       = 2;
        this.lay_lins    = 3;
        this.lay_cols    = 3;
        this.lay         = &lay;
        this.uis_n       = 9;
    end;
    this.grid = &&g;

    // images x - o
    var _SDL_Texture&? tex_x;
        finalize
            tex_x = &_IMG_LoadTexture(&&ren, "imgs/x.png");
        with
            _SDL_DestroyTexture(&&tex_x!);
        end
    var _SDL_Texture&? tex_o;
        finalize
            tex_o = &_IMG_LoadTexture(&&ren, "imgs/o.png");
        with
            _SDL_DestroyTexture(&&tex_o!);
        end

    pool UITexture[9] uis;
    pause/if this.pse do
        loop do
            var int idx = await g.ok_uiclicked;

            state[idx] = global:player;
            this.won  = _Game_check(&&state, idx, global:player);

            // clicked on an occupied square?
            var bool is_occupied = false;
            loop it in g.uis do
                if it:idx == idx then
                    is_occupied = true;
                end
            end
            if is_occupied then
                continue;
            end

            var UITexture&&? ui = spawn UITexture in uis with
                this.ren = &ren;
                if global:player == 1 then
                    this.tex = &tex_x!;
                else
                    this.tex = &tex_o!;
                end
            end;
                spawn UIGridItem in g.uis with
                    this.idx = idx;
                    this.ui  = ui!;
                end;
                call/rec g.go(null);

            // notify main application
            emit global:ok_game => (this.id, this.won, idx);

            if this.won then
                await FOREVER;      // TODO: chg to break
            end
        end
    end
end;

#ifdef __ULT_GAME_CEU

var _SDL_Window&? win;
    finalize
        win = &_SDL_CreateWindow("The Ultimate Tic-Tac-Toe",
                            500, 1300, 800, 480, _SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(&&win!);
    end

var int win_w;
var int win_h;
    _SDL_GetWindowSize(&&win!, &&win_w, &&win_h);

var _SDL_Renderer&? ren;
    finalize
        ren = &_SDL_CreateRenderer(&&win!, -1, 0);
    with
        _SDL_DestroyRenderer(&&ren!);
    end

// images X - O
var _SDL_Texture&? tex_xx;
    finalize
        tex_xx = &_IMG_LoadTexture(&&ren!, "imgs/xx.png");
    with
        _SDL_DestroyTexture(&&tex_xx!);
    end
var _SDL_Texture&? tex_oo;
    finalize
        tex_oo = &_IMG_LoadTexture(&&ren!, "imgs/oo.png");
    with
        _SDL_DestroyTexture(&&tex_oo!);
    end

par/or do
    await SDL_QUIT;
with
    loop do
        var Game game with
            this.id  = 0;
            this.ren = &ren!;
        end;

        do
            var SDL_Rect r = SDL_Rect(0,0, win_w,win_h);
            call/rec game.grid!:go_bg(&&r, true);
        end

        loop do
            var int id,won,idx;
            (id,won,idx) = await global:ok_game;
            if won > 0 then
                break;
            end
            global:player = 3 - global:player;
        end

        var UITexture ui with
            this.ren = &ren!;
            this.bg_clr = SDL_COLOR_GRAY;
            this.align_x = _UI_ALIGN_CENTER;
            this.align_y = _UI_ALIGN_CENTER;
            if global:player == 1 then
                this.tex = &tex_xx!;
            else
                this.tex = &tex_oo!;
            end
        end;

        do
            var SDL_Rect r = SDL_Rect(win_w/2,win_h/2, 0,0);
            ui.go(&&r);
        end

        await game.grid!:ok_clicked;
    end
with
    every SDL_REDRAW do
        _SDL_RenderPresent(&&ren!);
    end
end

escape 0;

#endif
#endif
