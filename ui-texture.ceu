#ifndef _UI_TEXTURE_CEU
#define _UI_TEXTURE_CEU

#include "sdl.ceu"
#include "ui.ceu"

input void SDL_REDRAW;
input _SDL_MouseButtonEvent* SDL_MOUSEBUTTONUP;

class UITexture with
    interface UI;
    var   _SDL_Renderer* ren       = null;
    var   int            align_x   = _UI_ALIGN_CENTER;
    var   int            align_y   = _UI_ALIGN_MIDDLE;
    var   int            bg_redim? = 0;
    var   _SDL_Color*    bg_clr    = null;

    var   _SDL_Texture*  tex     = null;
    var   int            w, h;  // original dimensions
do
    /* NATIVE METHODS */

    native do
        void CEU_UITexture__go (CEU_UITexture* this, SDL_Rect* r) {
            if (r != NULL) {
                // ignoring r->w / r->h (no redim)
                this->rect.x = UI_align(r->x, this->w, this->align_x);
                this->rect.y = UI_align(r->y, this->h, this->align_y);
                this->rect.w = this->w;
                this->rect.h = this->h;
            }
        }

        void CEU_UITexture__go_bg (CEU_UITexture* this, SDL_Rect* bg) {
            assert(this->bg_redim_ == 0);
            this->bg_rect = *bg;
            this->rect.x = UI_align_bg(bg->x, bg->w, this->w, this->align_x);
            this->rect.y = UI_align_bg(bg->y, bg->h, this->h, this->align_y);
            this->rect.w = this->w;
            this->rect.h = this->h;
        }
    end

    /* BODY */

    _assert(this.ren != null);
    _assert(this.tex != null);

    _SDL_QueryTexture(tex, null, null, &this.w, &this.h);

    par do
        // OK_CLICKED
        loop do
            var _SDL_MouseButtonEvent* but = await SDL_MOUSEBUTTONUP;
            if _SDL_Rect_vs_Mouse(&this.rect, but) then
                emit ok_clicked;
            end
        end
    with
        every SDL_REDRAW do
            if bg_clr != null then
                _SDL_SetRenderDrawColor(ren,
                    bg_clr:r,bg_clr:g,bg_clr:b,bg_clr:a);
                _SDL_RenderFillRect(ren, &this.bg_rect);
            end
            //emit ok_redraw_pre;

            _SDL_RenderCopy(this.ren, this.tex, null, &rect);
            //emit ok_redraw_pos;
        end
    end
end

native nohold _SDL_text2texture();
native do
    //#include "SDL2/SDL_ttf.h"
    SDL_Texture* SDL_text2texture (SDL_Renderer* ren,
                                   TTF_Font* font, char* text,
                                   SDL_Color* fg, SDL_Color* bg)
    {
        // Text => Surface
        SDL_Surface* sfc;
        if (bg == NULL)
            sfc = TTF_RenderText_Blended(font, text, *fg);
        else
            sfc = TTF_RenderText_Shaded(font, text, *fg, *bg);

        // Surface => Texture
        SDL_Texture* tex = SDL_CreateTextureFromSurface(ren, sfc);
        SDL_FreeSurface(sfc);

        return tex;
    }
end

#ifdef __UI_TEXTURE_CEU

#include "colors.ceu"
input void SDL_QUIT;

var int win_w;
var int win_h;
var _SDL_Window* win;
    finalize
        win = _SDL_CreateWindow("UI - Texture",
                            500, 1300, 800, 480, _SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(win);
    end

_SDL_GetWindowSize(win, &win_w, &win_h);
var _SDL_Rect win_r;
    win_r.w = win_w;
    win_r.h = win_h;

var _SDL_Renderer* ren;
    finalize
        ren = _SDL_CreateRenderer(win, -1, 0);
    with
        _SDL_DestroyRenderer(ren);
    end

_TTF_Init();
    finalize with
        _TTF_Quit();
    end

var _TTF_Font* font;
finalize
    font = _TTF_OpenFont("fnts/monofonto.ttf", 20);
with
    _TTF_CloseFont(font);
end
_assert(font != null);

var _SDL_Texture* txt;

var _SDL_Texture* tex_txt;
finalize
    tex_txt = _SDL_text2texture(ren, font, "ola mundo!",
                                &_colors.black, &_colors.white);
with
    _SDL_DestroyTexture(tex_txt);
end

var _SDL_Rect r1, r2;

par/or do
    await SDL_QUIT;
with
    every SDL_REDRAW do
        _SDL_SetRenderDrawColor(ren, 0x00,0x00,0x00, 0);
        _SDL_RenderFillRect(ren, &win_r);
        _SDL_SetRenderDrawColor(ren, 0xFF,0xFF,0xFF, 0);
        _SDL_RenderFillRect(ren, &r2);
    end
with
    var _SDL_Texture* tex;
    finalize
        tex = _IMG_LoadTexture(ren, "samples/img.png");
    with
        _SDL_DestroyTexture(tex);
    end

    var UITexture ui1 with
        this.ren = ren;
        this.tex = tex;
        this.bg_clr = &_colors.blue;
    end;

    var UITexture ui2 with
        this.ren = ren;
        this.tex = tex;
    end;

    var UITexture ui_txt with
        this.ren = ren;
        this.tex = tex_txt;
        this.align_x = _UI_ALIGN_LEFT;
        this.align_y = _UI_ALIGN_TOP;
    end;

    var _SDL_Rect r_txt;
        r_txt.x = 10;
        r_txt.y = 10;
    ui_txt._go(&r_txt);

    par do
        r1.x = 10;
        r1.y = 10;
        r1.w = 150;
        r1.h = 150;

        r2.x = 200;
        r2.y = 100;
        r2.w = 100;
        r2.h = 100;

        loop do
            native _rand();
            loop i, 500 do
                r1.x = r1.x + 1;
                r1.w = r1.w + _rand() % 3 - 1;
                if r1.w < 5 then r1.w = 5; end
                r1.h = r1.h + _rand() % 3 - 1;
                if r1.h < 5 then r1.h = 5; end
                ui1._go_bg(&r1);
                await 10ms;
            end

            loop i, 300 do
                r1.y = r1.y + 1;
                r1.w = r1.w + _rand() % 3 - 1;
                if r1.w < 5 then r1.w = 5; end
                r1.h = r1.h + _rand() % 3 - 1;
                if r1.h < 5 then r1.h = 5; end
                ui1._go_bg(&r1);
                await 10ms;
            end

            loop i, 500 do
                r1.x = r1.x - 1;
                r1.w = r1.w + _rand() % 3 - 1;
                if r1.w < 5 then r1.w = 5; end
                r1.h = r1.h + _rand() % 3 - 1;
                if r1.h < 5 then r1.h = 5; end
                ui1._go_bg(&r1);
                await 10ms;
            end

            loop i, 300 do
                r1.y = r1.y - 1;
                r1.w = r1.w + _rand() % 3 - 1;
                if r1.w < 5 then r1.w = 5; end
                r1.h = r1.h + _rand() % 3 - 1;
                if r1.h < 5 then r1.h = 5; end
                ui1._go_bg(&r1);
                await 10ms;
            end
        end
    with
        loop do
            loop i, 3 do
                loop j, 3 do
                    ui1.align_x = i;
                    ui1.align_y = j;
                    ui1._go_bg(&r1);

                    ui2.align_x = i;
                    ui2.align_y = j;
                    ui2._go_bg(&r2);
                    await 1s;
                end
            end
        end
    with
        every ui1.ok_clicked do
            _printf("clicked 1\n");
        end
    with
        every ui2.ok_clicked do
            _printf("clicked 2\n");
        end
    end
with
    every SDL_REDRAW do
        _SDL_RenderPresent(ren);
    end
end

return 0;

#endif

#endif
