#include "sdl.ceu"
#include "sdl-colors.ceu"
#include "ui/grid.ceu"

interface IGame with
    var int id;
    var int won;
end

interface Global with
    event (int,int,int) ok_game;   // id,won,idx
    var int player;
end
event (int,int,int) ok_game;
var int player = 0;

#include "game.ceu"

input void SDL_REDRAW;
input void SDL_QUIT;

var _SDL_Window&? win;
    finalize
        win = &_SDL_CreateWindow("The Ultimate Tic-Tac-Toe",
                            500, 1300, 800, 480, _SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(&&win!);
    end

var int win_w = 0;
var int win_h = 0;
    _SDL_GetWindowSize(&&win!, &&win_w, &&win_h);

var _SDL_Renderer&? ren;
    finalize
        ren = &_SDL_CreateRenderer(&&win!, -1, 0);
    with
        _SDL_DestroyRenderer(&&ren!);
    end

var _SDL_Texture&? tex_x;
    finalize
        tex_x = &_IMG_LoadTexture(&&ren!, "imgs/x.png");
    with
        _SDL_DestroyTexture(&&tex_x!);
    end
var _SDL_Texture&? tex_xx;
    finalize
        tex_xx = &_IMG_LoadTexture(&&ren!, "imgs/xx.png");
    with
        _SDL_DestroyTexture(&&tex_xx!);
    end
var _SDL_Texture&? tex_xxx;
    finalize
        tex_xxx = &_IMG_LoadTexture(&&ren!, "imgs/xxx.png");
    with
        _SDL_DestroyTexture(&&tex_xxx!);
    end

var _SDL_Texture&? tex_o;
    finalize
        tex_o = &_IMG_LoadTexture(&&ren!, "imgs/o.png");
    with
        _SDL_DestroyTexture(&&tex_o!);
    end
var _SDL_Texture&? tex_oo;
    finalize
        tex_oo = &_IMG_LoadTexture(&&ren!, "imgs/oo.png");
    with
        _SDL_DestroyTexture(&&tex_oo!);
    end
var _SDL_Texture&? tex_ooo;
    finalize
        tex_ooo = &_IMG_LoadTexture(&&ren!, "imgs/ooo.png");
    with
        _SDL_DestroyTexture(&&tex_ooo!);
    end

var _SDL_Texture&? tex_vv;
    finalize
        tex_vv = &_IMG_LoadTexture(&&ren!, "imgs/vv.png");
    with
        _SDL_DestroyTexture(&&tex_vv!);
    end
var _SDL_Texture&? tex_vvv;
    finalize
        tex_vvv = &_IMG_LoadTexture(&&ren!, "imgs/vvv.png");
    with
        _SDL_DestroyTexture(&&tex_vvv!);
    end

var _SDL_Texture&? tex_new;
    finalize
        tex_new = &_IMG_LoadTexture(&&ren!, "imgs/new.png");
    with
        _SDL_DestroyTexture(&&tex_new!);
    end

var int[8] lay_main = [
    0, 0, 0, 0, 0, 0, 0, 1
];

var UIGrid main with
    this.ren      = &ren!;
    this.lay      = &lay_main;
    this.lay_lins = 1;
    this.lay_cols = 8;
    this.uis_n    = 2;
end;

var int[9] lay_games = [
    0, 1, 2,
    3, 4, 5,
    6, 7, 8
];

var UIGrid grid with
    this.ren      = &ren!;
    this.clr_bg   = SDL_COLOR_GRAY;
    this.spc_x    = 10;
    this.spc_y    = 10;
    this.lay      = &lay_games;
    this.lay_lins = 3;
    this.lay_cols = 3;
    this.uis_n    = 9;
end;
    spawn UIGridItem in main.uis with
        this.idx = 0;
        this.ui  = &&grid;
    end;

var int[5] lay_bar = [
    0, 1, 2, 3, 4
];

var UIGrid bar with
    this.ren      = &ren!;
    this.clr_bg   = SDL_COLOR_BLACK;
    this.spc_x    = 10;
    this.spc_y    = 10;
    this.lay      = &lay_bar;
    this.lay_lins = 5;
    this.lay_cols = 1;
    this.uis_n    = 5;
end;
    spawn UIGridItem in main.uis with
        this.idx = 1;
        this.ui  = &&bar;
    end;

var UITexture ui_x with
    this.ren    = &ren!;
    this.tex    = &tex_x!;
    this.bg_clr = SDL_COLOR_WHITE;
end;
    spawn UIGridItem in bar.uis with
        this.idx = 0;
        this.ui  = &&ui_x;
    end;

var UITexture ui_o with
    this.ren    = &ren!;
    this.tex    = &tex_o!;
    this.bg_clr = SDL_COLOR_WHITE;
end;
    spawn UIGridItem in bar.uis with
        this.idx = 1;
        this.ui  = &&ui_o;
    end;

var UITexture ui_new with
    this.ren = &ren!;
    this.tex = &tex_new!;
end;
    spawn UIGridItem in bar.uis with
        this.idx = 4;
        this.ui  = &&ui_new;
    end;

par/or do
    await SDL_QUIT;
/*** SIMUL
with
    @include(simul.ceu)
***/
with
    loop do
        par/or do
            await ui_new.ok_clicked;
/*** SIMUL
            await FOREVER;
***/
        with
            var SDL_Rect r = SDL_Rect(0,0, win_w,win_h);

            // final result
            var int res = do  // parent for Games
                var s8[9] state = [0,0,0,0,0,0,0,0,0];
                var int gi = 0;
                var Game[9] games with
                    this.id  = gi;
                    this.ren = &ren!;
                    gi = gi + 1;
                end;
                loop i in 9 do
                    games[i].grid!:clr_ui_bg = SDL_COLOR_YELLOW;
                    spawn UIGridItem in grid.uis with
                        this.idx = i;
                        this.ui  = games[i].grid!;
                    end;
                end

                call/rec main.go(&&r);

                ui_x.bg_clr = SDL_COLOR_YELLOW;
                ui_o.bg_clr = SDL_COLOR_WHITE;
                global:player = 1;

                pool UITexture[9] uis;
                loop do                 // TODO: every
                    var int id, won, idx;
                    (id,won,idx) = await global:ok_game;

                    // close myself if won
                    if won != 0 then
                        var UITexture&&? ui = spawn UITexture in uis with
                            this.ren = &ren!;
                            this.bg_clr = SDL_COLOR_GRAY;
                            if won == 1 then
                                this.tex = &tex_xx!;
                            else/if won == 2 then
                                this.tex = &tex_oo!;
                            else
                                this.tex = &tex_vv!;
                            end
                        end;
                            spawn UIGridItem in grid.uis with
                                this.idx = id;
                                this.ui  = ui!;
                            end;
                            call/rec grid.go(null);

                        state[id] = won;
                        //free game;
                            // no references to it (removed form grid)

                        var int res_ =
                            _Game_check(&&state, id, global:player);
                        if res_ != 0 then
                            escape res_;
                        end
                    end

                    // open all cells if going to a closed one
                    if state[idx] != 0 then
                        loop i in 9 do
                            var Game&& oth = &&games[i];
                            oth:grid!:clr_ui_bg = SDL_COLOR_YELLOW;
                            emit oth:pse => 0;
                        end
                    // otherwise, pause all but "idx" cell
                    else
                        loop i in 9 do
                            var Game&& oth = &&games[i];
                            if oth:id == idx then
                                oth:grid!:clr_ui_bg = SDL_COLOR_YELLOW;
                                emit oth:pse => 0;
                            else
                                oth:grid!:clr_ui_bg = SDL_COLOR_WHITE;
                                emit oth:pse => 1;
                            end
                        end
                    end

                    if global:player == 1 then
                        ui_x.bg_clr = SDL_COLOR_WHITE;
                        ui_o.bg_clr = SDL_COLOR_YELLOW;
                    else
                        ui_x.bg_clr = SDL_COLOR_YELLOW;
                        ui_o.bg_clr = SDL_COLOR_WHITE;
                    end
                    global:player = 3 - global:player;
                end
            end; // kills all remaining games

            var UITexture final with
                this.ren = &ren!;
                this.bg_clr = SDL_COLOR_GRAY;
                this.align_x = _UI_ALIGN_CENTER;
                this.align_y = _UI_ALIGN_MIDDLE;
                if res == 1 then
                    this.tex = &tex_xxx!;
                else/if res == 2 then
                    this.tex = &tex_ooo!;
                else
                    this.tex = &tex_vvv!;
                end
            end;
            call/rec final.go_bg(&&r, false);
            await main.ok_clicked;
        end
    end
with
    every SDL_REDRAW do
        _SDL_RenderPresent(&&ren!);
    end
end

escape 0;
