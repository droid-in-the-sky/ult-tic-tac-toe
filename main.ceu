import sdl.ceu;
import colors.ceu;
import uigrid.ceu;

interface Global with
    event (void*,int) ok_game;   // id,idx
    var int player;
end
event (void*,int) ok_game;
var int player;

import game.ceu;

input void SDL_REDRAW;
input void SDL_QUIT;

var _SDL_Window* win;
    finalize
        win = _SDL_CreateWindow("The Ultimate Tic-Tac-Toe",
                            500, 1300, 800, 480, _SDL_WINDOW_SHOWN);
    with
        _SDL_DestroyWindow(win);
    end

var int win_w;
var int win_h;
    _SDL_GetWindowSize(win, &win_w, &win_h);

var _SDL_Renderer* ren;
    finalize
        ren = _SDL_CreateRenderer(win, -1, 0);
    with
        _SDL_DestroyRenderer(ren);
    end

var _SDL_Texture* tex_x;
    finalize
        tex_x = _IMG_LoadTexture(ren, "imgs/x.png");
    with
        _SDL_DestroyTexture(tex_x);
    end
    _assert(tex_x != null);
var _SDL_Texture* tex_xx;
    finalize
        tex_xx = _IMG_LoadTexture(ren, "imgs/xx.png");
    with
        _SDL_DestroyTexture(tex_xx);
    end
    _assert(tex_xx != null);
var _SDL_Texture* tex_xxx;
    finalize
        tex_xxx = _IMG_LoadTexture(ren, "imgs/xxx.png");
    with
        _SDL_DestroyTexture(tex_xxx);
    end
    _assert(tex_xxx != null);

var _SDL_Texture* tex_o;
    finalize
        tex_o = _IMG_LoadTexture(ren, "imgs/o.png");
    with
        _SDL_DestroyTexture(tex_o);
    end
    _assert(tex_o != null);
var _SDL_Texture* tex_oo;
    finalize
        tex_oo = _IMG_LoadTexture(ren, "imgs/oo.png");
    with
        _SDL_DestroyTexture(tex_oo);
    end
    _assert(tex_oo != null);
var _SDL_Texture* tex_ooo;
    finalize
        tex_ooo = _IMG_LoadTexture(ren, "imgs/ooo.png");
    with
        _SDL_DestroyTexture(tex_ooo);
    end
    _assert(tex_ooo != null);

var _SDL_Texture* tex_vv;
    finalize
        tex_vv = _IMG_LoadTexture(ren, "imgs/vv.png");
    with
        _SDL_DestroyTexture(tex_vv);
    end
    _assert(tex_vv != null);
var _SDL_Texture* tex_vvv;
    finalize
        tex_vvv = _IMG_LoadTexture(ren, "imgs/vvv.png");
    with
        _SDL_DestroyTexture(tex_vvv);
    end
    _assert(tex_vvv != null);

var _SDL_Texture* tex_new;
    finalize
        tex_new = _IMG_LoadTexture(ren, "imgs/new.png");
    with
        _SDL_DestroyTexture(tex_new);
    end
    _assert(tex_new != null);

var UIGrid grid with
    native do
        int lay_games[9] = {
            0, 1, 2,
            3, 4, 5,
            6, 7, 8
        };
    end
    this.ren      = ren;
    this.clr_bg?  = 1;
    this.clr_bg   = _colors.gray;
    this.spc_x    = 10;
    this.spc_y    = 10;
    this.lay      = _lay_games;
    this.lay_lins = 3;
    this.lay_cols = 3;
    this.uis_n    = 9;
end;

var UIGrid bar with
    native do
        int lay_bar[5] = {
            0, 1, 2, 3, 4
        };
    end
    this.ren      = ren;
    this.clr_bg?  = 1;
    this.clr_bg   = _colors.black;
    this.spc_x    = 10;
    this.spc_y    = 10;
    this.lay      = _lay_bar;
    this.lay_lins = 5;
    this.lay_cols = 1;
    this.uis_n    = 5;

    var UITexture ui_x with
        this.ren = ren;
        this.tex = tex_x;
        this.clr_bg? = 1;
    end;

    var UITexture ui_o with
        this.ren = ren;
        this.tex = tex_o;
        this.clr_bg? = 1;
    end;

    var UITexture ui_new with
        this.ren = ren;
        this.tex = tex_new;
    end;

    var UI*[5] uis_bar;
        uis_bar[0] = &ui_x;
        uis_bar[1] = &ui_o;
        uis_bar[2] = null;
        uis_bar[3] = null;
        uis_bar[4] = &ui_new;
    this.uis = uis_bar;
end;

var UIGrid main with
    native do
        int lay_main[8] = {
            0, 0, 0, 0, 0, 0, 0, 1
        };
    end
    this.ren      = ren;
    this.lay      = _lay_main;
    this.lay_lins = 1;
    this.lay_cols = 8;
    this.uis_n    = 2;

    var UI*[2] uis_main;
        uis_main[0] = &grid;
        uis_main[1] = &bar;
        this.uis    = uis_main;
end;

par/or do
    await SDL_QUIT;
/***
with
    @include(simul.ceu)
***/
with
    loop do
        par/or do
            await ui_new.ok_clicked;
/***
            await FOREVER;
***/
        with
            var _SDL_Rect r;
                r.w = win_w;
                r.h = win_h;
                r.x = 0;
                r.y = 0;

            // final result
            var int res = do  // parent for Games
                var s8[9] state;
                loop i, 9 do
                    spawn[9] Game with
                        this.id  = i;
                        this.ren = ren;
                        this.grid.clr_ui_bg = _colors.yellow;
                        grid.uis[i] = &this.grid;
                            // TODO: finally
                            // grid >> this
                        state[i] = 0;
                    end;
                end

                emit main.go_redim => &r;

                ui_x.clr_bg  = _colors.yellow;
                ui_o.clr_bg  = _colors.white;
                global:player = 1;

                var UI* ui;
                loop do                 // TODO: every
                    var void* game_;
                    var int idx;
                    (game_,idx) = await global:ok_game;
                    var Game* game = (Game*) game_;
                    _assert(game != null);

                    // close myself if win?
                    if game:win? != 0 then
                        ui = new[9] UITexture with
                            this.ren = ren;
                            this.clr_bg? = 1;
                            this.clr_bg  = _colors.gray;
                            if game:win? == 1 then
                                this.tex = tex_xx;
                            else/if game:win? == 2 then
                                this.tex = tex_oo;
                            else
                                this.tex = tex_vv;
                            end
                        end;
                        emit grid.go_ui => (game:id,ui);     // X or 0 or #

                        state[game:id] = game:win?;
                        free game;
                            // no references to it (removed form grid)

                        var int res_ =
                            _Game_check(state, game:id, global:player);
                        if res_ != 0 then
                            return res_;
                        end
                    end

                    // open all cells if going to a closed one
                    if state[idx] != 0 then
                        loop oth, Game* do
                            oth:grid.clr_ui_bg = _colors.yellow;
                            emit oth:pse? => 0;
                        end
                    // otherwise, pause all but "idx" cell
                    else
                        loop oth, Game* do
                            if oth:id == idx then
                                oth:grid.clr_ui_bg = _colors.yellow;
                                emit oth:pse? => 0;
                            else
                                oth:grid.clr_ui_bg = _colors.white;
                                emit oth:pse? => 1;
                            end
                        end
                    end

                    uis_bar[global:player-1]:clr_bg = _colors.white;
                    global:player = 3 - global:player;
                    uis_bar[global:player-1]:clr_bg = _colors.yellow;
                end
            end; // kills all remaining games

            var UITexture final with
                this.ren = ren;
                this.clr_bg? = 1;
                this.clr_bg  = _colors.gray;
                if res == 1 then
                    this.tex = tex_xxx;
                else/if res == 2 then
                    this.tex = tex_ooo;
                else
                    this.tex = tex_vvv;
                end
            end;
            emit final.go_redim => &r;
            await main.ok_clicked;
        end
    end
with
    every SDL_REDRAW do
        _SDL_RenderPresent(ren);
    end
end

return 0;
